<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Starmap</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/index.css">
  <script type="text/javascript" src="/javascripts/d3.min.js"></script>
  <script type="text/javascript" src="/javascripts/d3.geo.projection.min.js"></script>
  <script type="text/javascript" src="/javascripts/celestial.min.js"></script>
  <link rel="stylesheet" href="/stylesheets/celestial.css">
</head>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat&display=swap');

  .display-text {
    font-family: 'Montserrat', sans-serif;
    font-size: 1.5rem;
  }
</style>

<body class="d-flex flex-column vh-100">
  <%- include('../partials/navbar') %>
  <main class="container mt-4">
    <%- include('../partials/flash') %>
    <div class="row justify-content-center">
      <div style="<% if (width != 0) {%>width: 1008px; <% }%>overflow:hidden;">
        <div id="celestial-map"></div>
      </div>
    </div>
    <div id="celestial-form"></div>
    <div class="p-4">
      <div class="row text-center p-1">
        <label class="display-text" id="customSaying">Saying</label>
      </div>
      <div class="row text-center p-1">
        <label class="display-text" id="date">Date</label>
      </div>
      <div class="row text-center p-1">
        <label class="display-text" id="locationLabel">Location</label>
      </div>
      <div class="row text-center p-1">
        <label class="display-text" id="coordinates">Coordinates</label>
      </div>
    </div>
    <div class="row pb-3 justify-content-center">
      <button class="btn btn-primary" style="width:30%" onclick="document.querySelector('#download-svg').click()">
        Download SVG
      </button>
    </div>
  </main>
  <%- include('../partials/footer') %>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
    crossorigin="anonymous"></script>
  <script src="/javascripts/validateForms.js"></script>

  <script>
    function hexToHSL(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      r = parseInt(result[1], 16);
      g = parseInt(result[2], 16);
      b = parseInt(result[3], 16);
      r /= 255, g /= 255, b /= 255;
      var max = Math.max(r, g, b), min = Math.min(r, g, b);
      var h, s, l = (max + min) / 2;
      if (max == min) {
        h = s = 0; // achromatic
      } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r: h = (g - b) / d + (g < b ? 6 : 0); break;
          case g: h = (b - r) / d + 2; break;
          case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
      }
      var HSL = new Object();
      HSL['h'] = h;
      HSL['s'] = s;
      HSL['l'] = l;
      return HSL;
    }
  </script>

  <script type="text/javascript">
    const width = parseInt('<%- width %>');
    const starColor = '<%- starColor %>';
    const starOpacity = parseFloat('<%- starOpacity %>');
    const starSize = parseInt('<%- starSize %>');
    const backgroundColor = '<%- backgroundColor %>';
    const outlineColor = '<%- outlineColor %>';
    const outlineWidth = parseFloat('<%- outlineWidth %>');
    const constellationColor = '<%- constellationColor %>';
    const constellationOpacity = parseFloat('<%- constellationOpacity %>');
    const showConstellationLines = '<%- showConstellationLines %>' === 'true';
    const constellationWidth = parseFloat('<%- constellationWidth %>');
    let graticuleColor = '<%- graticuleColor %>';
    const graticuleOpacity = parseFloat('<%- graticuleOpacity %>');
    const showGraticule = '<%- showGraticule %>' === 'true';
    const graticuleWidth = parseFloat('<%- graticuleWidth %>');
    const graticuleDash = parseInt('<%- graticuleDash %>');
    const latitude = '<%- latitude %>';
    const longitude = '<%- longitude %>';
    const year = parseInt('<%- year %>');
    const month = parseInt('<%- month %>');
    const day = parseInt('<%- day %>');
    const hour = parseInt('<%- hour %>');
    const minute = parseInt('<%- minute %>');

    if (hexToHSL(backgroundColor).l >= 0.6)
      graticuleColor = "#000000";
    else
      graticuleColor = "#ffffff";

    Celestial.display({
      width: width,
      disableAnimations: true,
      adaptable: true,
      interactive: true,
      advanced: false,
      form: false,
      formFields: {
        "location": false,  // Set visiblity for each group of fields with the respective id
        "general": true,
        "stars": false,
        "dsos": false,
        "constellations": false,
        "lines": false,
        "other": false,
        "download": false
      },
      controls: false,
      //formFields: { download: false },
      location: false,
      //projection: "airy",
      projection: "azimuthalEqualArea",
      datapath: "/data/",
      planets: { show: false },
      dsos: { show: false },
      constellations: {
        names: false,      // Show constellation names 
        lines: showConstellationLines,   // Show constellation lines, style below
        lineStyle: { stroke: `${constellationColor}`, width: constellationWidth, opacity: constellationOpacity }
      },
      mw: { show: false },
      lines: {  // Display & styles for graticule & some planes
        graticule: {
          // dash sets the dashed lines
          show: showGraticule, stroke: `${graticuleColor}`, width: graticuleWidth, opacity: graticuleOpacity, dash: [graticuleDash],
          lon: { pos: [""], fill: "#eee", font: "10px Helvetica, Arial, sans-serif" },
          lat: { pos: [""], fill: "#eee", font: "10px Helvetica, Arial, sans-serif" }
        },
        equatorial: { show: false },
        ecliptic: { show: false },
        galactic: { show: false },
        supergalactic: { show: false }
      },
      background: { // Background style
        fill: `${backgroundColor}`,   // Area fill
        opacity: 1,
        stroke: `${outlineColor}`, // Outline
        width: outlineWidth
      },
      horizon: { show: false },
      stars: {
        show: true,    // Show stars
        limit: 6,      // Show only stars brighter than limit magnitude
        colors: false,  // Show stars in spectral colors, if not use default color
        style: { fill: `${starColor}`, opacity: starOpacity }, // Default style for stars
        designation: false, // Show star names (Bayer, Flamsteed, Variable star, Gliese or designation, 
        size: starSize,       // Maximum size (radius) of star circle in pixels
        exponent: -0.28, // Scale exponent for star size, larger = more linear
        data: 'stars.6.json' // Data source for stellar data, 
        // number indicates limit magnitude
      },
    });

    Celestial.skyview({ "location": [latitude, longitude] });
    Celestial.skyview({ "date": new Date(Date.UTC(year, month, day, hour, minute)) });
    Celestial.Canvas.symbol();
    // Download SVG
    //document.querySelector('#download-svg').click();
  </script>

  <script>
    // Script for adding text fields
    let latitudeDisplay = parseFloat(latitude).toFixed(3);
    if (latitude < 0) latitudeDisplay = (latitudeDisplay * -1) + "\xB0S"
    else latitudeDisplay = latitudeDisplay + "\xB0N"
    let longitudeDisplay = parseFloat(longitude).toFixed(3);
    if (longitude < 0) longitudeDisplay = (longitudeDisplay * -1) + "\xB0W"
    else longitudeDisplay = longitudeDisplay + "\xB0E"

    let monthDisplay = month;
    switch (parseInt(month)) {
      case 1: {
        monthDisplay = "January";
        break;
      }
      case 2: {
        monthDisplay = "February";
        break;
      }
      case 3: {
        monthDisplay = "March";
        break;
      }
      case 4: {
        monthDisplay = "April";
        break;
      }
      case 5: {
        monthDisplay = "May";
        break;
      }
      case 6: {
        monthDisplay = "June";
        break;
      }
      case 7: {
        monthDisplay = "July";
        break;
      }
      case 8: {
        monthDisplay = "August";
        break;
      }
      case 9: {
        monthDisplay = "September";
        break;
      }
      case 10: {
        monthDisplay = "October";
        break;
      }
      case 11: {
        monthDisplay = "November";
        break;
      }
      case 12: {
        monthDisplay = "December";
        break;
      }
      default: monthDisplay = "none";

    }
    // let dayDisplay = day;
    // if (day === 1 || day === 21 || day === 31) dayDisplay += "st";
    // else if (day === 2 || day === 22) dayDisplay += "nd";
    // else if (day === 3 || day === 23) dayDisplay += "rd";
    // else dayDisplay += "th";

    const locationName = '<%- locationName %>';
    const customSaying = '<%- customSaying %>';

    document.querySelector("#customSaying").textContent = customSaying.toUpperCase();
    document.querySelector("#date").textContent = `${monthDisplay.toUpperCase()} ${day}, ${year}`;
    document.querySelector("#locationLabel").textContent = locationName;
    document.querySelector("#coordinates").textContent = `${latitudeDisplay} / ${longitudeDisplay}`;
  </script>
</body>

</html>